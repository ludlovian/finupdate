import SQL from '../lib/sql.mjs'
export const clearOldDividends=SQL.from("DELETE FROM stock_dividend WHERE updated < datetime('now', '-' || ? || ' days')");
export const clearOldPrices=SQL.from("DELETE FROM stock_price WHERE updated < datetime('now', '-' || ? || ' days')");
export const clearPositions=SQL.from("UPDATE position SET qty = 0, qtyFactor = 1, source = NULL, updated = datetime('now') WHERE qty != 0");
export const clearTrades=SQL.from("UPDATE trade SET qty = NULL, cost = NULL, gain = NULL WHERE positionId IN ( SELECT positionId FROM position WHERE accountId IN ( SELECT accountId FROM account WHERE name = ? ) )");
export const ddl=SQL.from("PRAGMA journal_mode = WAL;PRAGMA foreign_keys = TRUE;CREATE VIEW IF NOT EXISTS dbversion AS SELECT 2 AS version;CREATE TABLE IF NOT EXISTS stock( stockId INTEGER PRIMARY KEY, ticker TEXT NOT NULL UNIQUE, name TEXT, incomeType TEXT, notes TEXT, source TEXT, updated TEXT NOT NULL DEFAULT (datetime('now')) );CREATE TABLE IF NOT EXISTS stock_dividend( stockId INTEGER PRIMARY KEY REFERENCES stock(stockId), dividend INTEGER NOT NULL, dividendFactor INTEGER NOT NULL DEFAULT 1, source TEXT, updated TEXT NOT NULL DEFAULT (datetime('now')) );CREATE TABLE IF NOT EXISTS stock_price( stockId INTEGER PRIMARY KEY REFERENCES stock(stockId), price INTEGER NOT NULL, priceFactor INTEGER NOT NULL, source TEXT, updated TEXT NOT NULL DEFAULT (datetime('now')) );CREATE TABLE IF NOT EXISTS account( accountId INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE );INSERT OR IGNORE INTO account (name) VALUES ('Dealing'), ('ISA'), ('SIPP'), ('SIPP2');CREATE TABLE IF NOT EXISTS person( personId INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE );INSERT OR IGNORE INTO person (name) VALUES ('AJL'), ('RSGG');CREATE TABLE IF NOT EXISTS position( positionId INTEGER PRIMARY KEY, personId INTEGER NOT NULL REFERENCES person(personId), accountId INTEGER NOT NULL REFERENCES account(accountId), stockId INTEGER NOT NULL REFERENCES stock(stockId), qty INTEGER NOT NULL, qtyFactor INTEGER NOT NULL DEFAULT 1, source TEXT, updated TEXT NOT NULL DEFAULT (datetime('now')), UNIQUE (personId, accountId, stockId) );CREATE TABLE IF NOT EXISTS trade( tradeId INTEGER PRIMARY KEY, positionId INTEGER NOT NULL REFERENCES position(positionId), seq INTEGER NOT NULL, date TEXT NOT NULL, qty INTEGER, qtyFactor INTEGER, cost INTEGER, costFactor INTEGER, gain INTEGER, gainFactor INTEGER, notes TEXT, source TEXT, updated TEXT NOT NULL DEFAULT (datetime('now')), UNIQUE (positionId, seq) );CREATE VIEW IF NOT EXISTS stock_view AS SELECT s.stockId AS stockId, s.ticker AS ticker, s.name AS name, s.incomeType AS incomeType, s.notes AS notes, CAST (d.dividend AS REAL) / CAST (d.dividendFactor AS REAL) AS dividend, CAST (p.price AS REAL) / CAST (p.priceFactor AS REAL) AS price, CAST (d.dividend * p.priceFactor AS REAL) / CAST (p.price * d.dividendFactor AS REAL) AS yield FROM stock s LEFT JOIN stock_dividend d USING (stockId) LEFT JOIN stock_price p USING (stockId) ORDER BY ticker;CREATE VIEW IF NOT EXISTS position_view AS SELECT p.positionId AS positionId, s.ticker AS ticker, a.name AS account, w.name AS person, CAST (p.qty AS REAL) / CAST (p.qtyFactor AS REAL) AS qty, round(p.qty * s.price, 2) AS value, round(p.qty * s.dividend, 2) AS income FROM position p INNER JOIN stock_view s USING (stockId) INNER JOIN account a USING (accountId) INNER JOIN person w USING (personId) WHERE qty != 0 ORDER BY ticker, account, person;CREATE VIEW IF NOT EXISTS trade_view AS SELECT t.tradeId AS tradeId, s.ticker AS ticker, a.name AS account, w.name AS person, t.date AS date, CAST (t.qty AS REAL) / CAST (t.qtyFactor AS REAL) AS qty, round(CAST (t.cost AS REAL) / CAST (t.costFactor AS REAL), 2) AS cost, round(CAST (t.gain AS REAL) / CAST (t.gainFactor AS REAL), 2) AS gain, t.notes AS notes FROM trade t, position p, account a, person w, stock s WHERE t.positionId = p.positionId AND p.accountId = a.accountId AND p.personId = w.personId AND p.stockId = s.stockId ORDER BY ticker, account, person, t.seq");
export const deleteTrades=SQL.from("DELETE FROM trade WHERE qty IS NULL AND cost IS NULL AND gain IS NULL");
export const insertDividend=SQL.from("INSERT OR IGNORE INTO stock (ticker) VALUES ($ticker);INSERT INTO stock_dividend ( stockId, dividend, dividendFactor, source ) SELECT stockId, $dividend, $dividendFactor, $source FROM stock WHERE ticker = $ticker AND $dividend IS NOT NULL ON CONFLICT DO UPDATE SET dividend = excluded.dividend, dividendFactor = excluded.dividendFactor, source = excluded.source;DELETE FROM stock_dividend WHERE stockId IN ( SELECT stockId FROM stock WHERE ticker = $ticker) AND $dividend IS NULL");
export const insertPosition=SQL.from("INSERT OR IGNORE INTO stock (ticker) VALUES ($ticker);INSERT OR IGNORE INTO person (name) VALUES ($person);INSERT OR IGNORE INTO account (name) VALUES ($account);INSERT INTO position ( personId, accountId, stockId, qty, qtyFactor, source ) SELECT p.personId, a.accountId, s.stockId, $qty, $qtyFactor, $source FROM person p, account a, stock s WHERE p.name = $person AND a.name = $account AND s.ticker = $ticker  ON CONFLICT DO UPDATE SET qty = excluded.qty, qtyFactor = excluded.qtyFactor, source = excluded.source, updated = excluded.updated");
export const insertPrice=SQL.from("INSERT OR IGNORE INTO stock(ticker) VALUES ($ticker);UPDATE stock SET name = $name WHERE ticker = $ticker AND name IS NULL;INSERT INTO stock_price ( stockId, price, priceFactor, source ) SELECT stockId, $price, $priceFactor, $source FROM stock WHERE ticker = $ticker ON CONFLICT DO UPDATE SET price = excluded.price, priceFactor = excluded.priceFactor, source = excluded.source");
export const insertStock=SQL.from("INSERT INTO stock (ticker, name, incomeType, notes, source) VALUES ($ticker, $name, $incomeType, $notes, $source) ON CONFLICT DO UPDATE SET name = excluded.name, incomeType = excluded.incomeType, notes = excluded.notes, source = excluded.source, updated = excluded.updated");
export const insertTrade=SQL.from("INSERT OR IGNORE INTO stock (ticker) VALUES ($ticker);INSERT OR IGNORE INTO person (name) VALUES ($person);INSERT OR IGNORE INTO account (name) VALUES ($account);INSERT OR IGNORE INTO position ( personId, accountId, stockId, qty, qtyFactor ) SELECT w.personId, a.accountId, s.stockId, 0, 1 FROM person w, account a, stock s WHERE w.name = $person AND a.name = $account AND s.ticker = $ticker;INSERT INTO trade ( positionId, seq, date, qty, qtyFactor, cost, costFactor, gain, gainFactor, notes, source ) SELECT p.positionId, $seq, $date, $qty, $qtyFactor, $cost, $costFactor, $gain, $gainFactor, $notes, $source FROM position p INNER JOIN person w USING (personId) INNER JOIN account a USING (accountId) INNER JOIN stock s USING (stockId) WHERE s.ticker = $ticker AND a.name = $account AND w.name = $person  ON CONFLICT DO UPDATE SET date = excluded.date, qty = excluded.qty, qtyFactor = excluded.qtyFactor, cost = excluded.cost, costFactor = excluded.costFactor, gain = excluded.gain, gainFactor = excluded.gainFactor, notes = excluded.notes, source = excluded.source, updated = excluded.updated");
export const selectActiveStocks=SQL.from("SELECT ticker from stock WHERE stockId IN ( SELECT stockId FROM stock_dividend UNION SELECT stockId FROM position WHERE qty != 0 )");
export const selectPositionSheet=SQL.from("SELECT p.ticker AS ticker, p.person AS person, p.account AS account, p.qty AS qty, p.value AS value, p.income AS income, s.price AS price, s.dividend AS dividend, s.yield AS yield  FROM position_view p, stock_view s  WHERE p.ticker = s.ticker  ORDER BY ticker, person, account");
export const selectStockSheet=SQL.from("SELECT ticker, incomeType, name, price, dividend, notes  FROM stock_view  ORDER BY ticker");
export const selectTradeSheet=SQL.from("SELECT person, account, ticker, date, qty, cost, gain  FROM trade_view  ORDER BY person, account, ticker, tradeId");
